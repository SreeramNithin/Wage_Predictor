# -*- coding: utf-8 -*-
"""prediction_page.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17nNga-Sxm8Twz30VT8YKeKOSACujvvtR
"""

import streamlit as st
import pandas as pd
import geopandas as gpd
import pycountry
import requests
import plotly.express as px
import pickle
from streamlit_lottie import st_lottie
from sklearn.preprocessing import LabelEncoder

def show_page():
  st.set_page_config(page_title="FIFA Player Wage Predictor", page_icon=":soccer:")

# Read the mean wages dataset
mean_wages = pd.read_csv('mean_wages.csv')
model = pickle.load(open('wage_predictor_model', 'rb'))
# Create a dictionary mapping country names to ISO codes
country_codes = {}
for country in pycountry.countries:
    country_codes[country.name] = country.alpha_3

# Add a new column with ISO codes for each nationality
mean_wages['iso_code'] = mean_wages['Nationality'].apply(lambda x: country_codes.get(x))

# Load the country polygons from a shapefile
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

# Merge the two dataframes based on iso_a3 and iso_code columns
merged_df = world.merge(mean_wages, left_on='iso_a3', right_on='iso_code')

# Create a new GeoDataFrame with the merged data and drop unnecessary columns
geo_df = gpd.GeoDataFrame(merged_df, geometry='geometry')
geo_df = geo_df.drop(['iso_code'], axis=1)

# Define a function to load Lottie animations from a URL
def load_lottieurl(url: str):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

# Load the animation JSON file
url = "https://assets3.lottiefiles.com/packages/lf20_0LAKyhkZmc.json"
animation = load_lottieurl(url)

# Create a two-column layout using beta_columns
cols = st.columns([2, 3])

# Add the animation to the first column
with cols[1]:
    st_lottie(animation, speed=1, width=300, height=200)

# Add the title to the second column
with cols[0]:
    st.markdown('<h1>FIFA Player Wage Predictor</h1>', unsafe_allow_html=True)

# Add input widgets for user to enter player data
overall = st.slider('Overall', min_value=1, max_value=99, value=50)
potential = st.slider('Potential', min_value=1, max_value=99, value=50)
age = st.slider('Age', min_value=16, max_value=45, value=25)

# Add search bar for Nationality column
nationality_search = st.selectbox('Country', mean_wages['Nationality'].unique())

# Filter dataframe based on the selected country
filtered_df = mean_wages[mean_wages['Nationality'] == nationality_search]

# Create a LabelEncoder object
le = LabelEncoder()

# Encode the 'Nationality' column
filtered_df['Nationality'] = le.fit_transform(filtered_df['Nationality'])

# Add input widgets for user to enter player work rates
workrate_dict = {0: 'Low', 1: 'Medium', 2: 'High'}
attacking_workrate = st.selectbox('Attacking Work Rate', workrate_dict.values())
defensive_workrate = st.selectbox('Defensive Work Rate', workrate_dict.values())

# Map the work rate values to their corresponding codes
attacking_workrate_code = [k for k, v in workrate_dict.items() if v == attacking_workrate][0]
defensive_workrate_code = [k for k, v in workrate_dict.items() if v == defensive_workrate][0]

# Predict player wage using the trained model
predicted_wage = model.predict([[overall, potential, age, filtered_df['Nationality'].values[0], attacking_workrate_code, defensive_workrate_code]])

# Display the predicted wage in a green box
st.success(f'<span style="font-size: 24px">Predicted Wage: {predicted_wage[0]:,.0f} EURO</span>')

# Create a choropleth map of mean wages in different countries
fig = px.choropleth(geo_df, locations='iso_a3', color='Wage(in Euro)', hover_name='Nationality',
                    projection='natural earth', color_continuous_scale='Greens')
fig.update_layout(
    margin={'r': 0, 't': 0, 'l': 0, 'b': 0},
    title={
        'text': "Mean wages in different countries",
        'y': 0.95,
        'x': 0.5,
        'xanchor': 'center',
        'yanchor': 'top'})
st.plotly_chart(fig)

