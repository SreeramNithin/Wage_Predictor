# -*- coding: utf-8 -*-
"""WagePredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17nNga-Sxm8Twz30VT8YKeKOSACujvvtR
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
import json
import requests
from streamlit_lottie import st_lottie

# Read the dataset
df = pd.read_excel('Encoded fifa data.xlsx')

# Create a LabelEncoder object to encode the Nationality column
le = LabelEncoder()

# Encode the Country column using LabelEncoder
df['Nationality'] = le.fit_transform(df['Country'])

# Create a dictionary that maps encoded values to country names
nationality_dict = dict(zip(df['Nationality'], df['Country']))

# Create a dictionary that maps work rate codes to descriptions
workrate_dict = {0: 'Low', 1: 'Medium', 2: 'High'}

# Define the independent and dependent variables
X = df[['Overall', 'Potential', 'Age', 'Nationality', 'Attacking_WorkRate', 'Defensive_WorkRate']]
y = df['Wage']

# Train a Random Forest Regressor model
model = RandomForestRegressor()
model.fit(X, y)



# Create a UI using Streamlit

st.set_page_config(page_title="FIFA Player Wage Predictor", page_icon=":soccer:")
# Add title and image
# Set page title and icon


# Define a function to load Lottie animations from a URL
def load_lottieurl(url: str):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

# Load the animation JSON file
url = "https://assets3.lottiefiles.com/packages/lf20_0LAKyhkZmc.json"
animation = load_lottieurl(url)

# Create a two-column layout using beta_columns
cols = st.columns([2, 3])

# Add the animation to the first column
with cols[1]:
    st_lottie(animation, speed=1, width=300, height=200)

# Add the title to the second column
with cols[0]:
    st.markdown(' <h1>FIFA Player Wage Predictor</h1></div>', unsafe_allow_html=True)

# Add other UI components as desired

st.markdown("""
    <style>
        body {
            background-image: url("https://img.freepik.com/free-vector/gradient-football-field-background_23-2149013355.jpg?size=626&ext=jpg&ga=GA1.2.1615033934.1677916889&semt=sph");
            background-size: cover;
        }
        /* Add additional CSS styles here as needed */
    </style>
""", unsafe_allow_html=True)





# Add input widgets for user to enter player data
overall = st.slider('Overall', min_value=1, max_value=99, value=50)
potential = st.slider('Potential', min_value=1, max_value=99, value=50)
age = st.slider('Age', min_value=16, max_value=45, value=25)

# Add search bar for Nationality column
nationality_search = st.selectbox('Country', df['Country'].unique())

# Filter dataframe based on the selected country and encode the nationality column
filtered_df = df[df['Country'] == nationality_search]
filtered_df['Nationality'] = le.transform(filtered_df['Country'])

#Add input widgets for user to enter player work rates

attacking_workrate = st.selectbox('Attacking Work Rate', workrate_dict.values())
defensive_workrate = st.selectbox('Defensive Work Rate', workrate_dict.values())

#Map the work rate values to their corresponding codes
attacking_workrate_code = [k for k, v in workrate_dict.items() if v == attacking_workrate][0]
defensive_workrate_code = [k for k, v in workrate_dict.items() if v == defensive_workrate][0]

# Set the background color to a gradient football field image
st.markdown(
    """
    <style>
    body {
        background-image: linear-gradient(to bottom right, #4b6cb7, #182848);
        background-repeat: no-repeat;
        background-size: cover;
    }
    </style>
    """,
    unsafe_allow_html=True
)    
#Predict player wage using the trained model

predicted_wage = model.predict([[overall, potential, age, filtered_df['Nationality'].values[0], attacking_workrate_code, defensive_workrate_code]])


# Display the predicted wage in a green box
#st.success(f'<span style="font-size: 24px">Predicted Wage: {predicted_wage[0]:,.0f} EURO</span>')

st.success(f'Predicted Wage: {predicted_wage[0]:,.0f} EURO')


